services:
  db:
    image: postgres:17.6-alpine3.22
    container_name: horm-db
    environment:
      POSTGRES_USER: 'admin'
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      # Expose Postgres to the host for local tools (optional)
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 15
    networks:
      - horm_network

  redis:
    image: redis:8.2-rc1-alpine
    container_name: horm-redis
    # If you want a password, set REDIS_PASSWORD in .env; otherwise leave it empty
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
    command: >
      sh -c '
        if [ -n "$REDIS_PASSWORD" ]; then
          exec redis-server --appendonly yes --requirepass "$REDIS_PASSWORD";
        else
          exec redis-server --appendonly yes;
        fi
      '
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli -a \"$REDIS_PASSWORD\" ping | grep PONG || redis-cli ping | grep PONG" ]
      interval: 5s
      timeout: 5s
      retries: 15
    networks:
      - horm_network

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: horm-app
    env_file:
      - .env
    environment:
      # Compose expands these at runtime using values from .env
      NODE_ENV: production
      PORT: 9988
      REDIS_URL: 'redis://redis:6379'
      POSTGRES_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      SMTP_FROM: ${SMTP_FROM}
      SMTP_SECURE: ${SMTP_SECURE}
      NOTIFY_EMAIL: ${NOTIFY_EMAIL}
      NOTIFY_WEBHOOK: ${NOTIFY_WEBHOOK}
      NOTIFY_CHANNELS: ${NOTIFY_CHANNELS}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      # Host:Container
      - "${PORT:-9988}:9988"
    restart: unless-stopped
    networks:
      - horm_network
    # If you have migrations, uncomment the next lines and ensure the scripts exist in package.json:
    # command: sh -c "bun run db:migrate && bun run start"

volumes:
  postgres-data:
  redis-data:

networks:
  horm_network:
    driver: bridge
